{"version":3,"sources":["components/square/Square.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Square","color","num","visible","onClick","type","className","style","backgroundColor","App","useState","colors","setColors","count","setCount","inputValue","setInputValue","setVisible","setColorIndex","value","toLowerCase","onChange","e","target","includes","indexOf","newArr","map","i","index","clickHandler","filter","ind","newArr2","deleteHandler","uuidv4","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAwBeA,G,MAdW,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,IAAKC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QAEhD,OACE,wBACEC,KAAK,SACLD,QAASA,EACTE,UAAS,iBAAYH,GAAW,cAChCI,MAAO,CAAEC,gBAAgB,GAAD,OAAKP,IAJ/B,SAMW,IAARC,GAAaA,MCyDLO,G,YAtEH,WAAO,IAAD,EACYC,mBAAmB,IAD/B,mBACTC,EADS,KACDC,EADC,OAEUF,mBAAmB,IAF7B,mBAETG,EAFS,KAEFC,EAFE,OAGoBJ,mBAAS,IAH7B,mBAGTK,EAHS,KAGGC,EAHH,OAIcN,oBAAS,GAJvB,mBAITP,EAJS,KAIAc,EAJA,OAKoBP,mBAAiB,GALrC,mBAKGQ,GALH,WA8BhB,OACE,qBAAKZ,UAAU,MAAf,SACE,qBAAKA,UAAU,YAAf,SACE,qBAAKA,UAAU,gBAAf,SACE,sBAAKA,UAAU,YAAf,UACE,gDACA,uBACED,KAAK,OACLC,UAAU,QACVa,MAAOJ,EAAWK,cAClBC,SAAU,SAACC,GAAD,OAAON,EAAcM,EAAEC,OAAOJ,UAE1C,wBACEb,UAAU,SACVD,KAAK,SACLD,QAAS,kBAtCA,WACnB,GAAIW,EACF,GAAKJ,EAAOa,SAAST,GAGd,CACLG,EAAcP,EAAOc,QAAQV,IAC7BE,GAAW,GACX,IAAMS,EAASb,EAAMc,KAAI,SAACC,EAAGC,GAAJ,OACvBd,IAAeJ,EAAOkB,GAASD,EAAI,EAAIA,KAEzCd,EAASY,QARTd,EAAU,GAAD,mBAAKD,GAAL,CAAaI,KACtBD,EAAS,GAAD,mBAAKD,GAAL,CAAY,KAkCCiB,IAHjB,oBAOA,qBAAKxB,UAAU,iBAAf,SACGK,EAAOgB,KAAI,SAACC,EAAGC,GACd,OACE,8BACE,cAAC,EAAD,CACE3B,IAAKW,EAAMgB,GACX1B,QAASA,EACTF,MAAO2B,EACPxB,QAAS,kBAlCP,SAACyB,GACrB,IAAMH,EAASf,EAAOoB,QAAO,SAACH,EAAGI,GAAJ,OAAYA,IAAQH,KAC3CI,EAAUpB,EAAMkB,QAAO,SAACH,EAAGI,GAAJ,OAAYA,IAAQH,KACjDf,EAASmB,GACTrB,EAAUc,GA8BuBQ,CAAcL,OALvBM,+BC5CbC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.370c47fb.chunk.js","sourcesContent":["import React, { FC } from 'react';\r\nimport './Square.css';\r\n\r\ntype Props = {\r\n  color: string;\r\n  num: number;\r\n  visible: boolean;\r\n  onClick:() => void;\r\n};\r\n\r\nconst Square: FC<Props> = ({ color, num, visible, onClick }) => {\r\n\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      onClick={onClick}\r\n      className={`shape ${!visible && 'text-color'}`}\r\n      style={{ backgroundColor: `${color}` }}\r\n    >\r\n      {num !== 0 && num}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Square;\r\n","import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport Square from './components/square/Square';\nimport './App.css';\nimport 'flexboxgrid';\n\nconst App = () => {\n  const [colors, setColors] = useState<string[]>([]);\n  const [count, setCount] = useState<number[]>([]);\n  const [inputValue, setInputValue] = useState('');\n  const [visible, setVisible] = useState(false);\n  const [colorIndex, setColorIndex] = useState<number>(0);\n\n  const clickHandler = () => {\n    if (inputValue) {\n      if (!colors.includes(inputValue)) {\n        setColors([...colors, inputValue]);\n        setCount([...count, 0]);\n      } else {\n        setColorIndex(colors.indexOf(inputValue));\n        setVisible(true);\n        const newArr = count.map((i, index) =>\n          inputValue === colors[index] ? i + 1 : i\n        );\n        setCount(newArr);\n      }\n    }\n  };\n\n  const deleteHandler = (index: number) => {\n    const newArr = colors.filter((i, ind) => ind !== index);\n    const newArr2 = count.filter((i, ind) => ind !== index);\n    setCount(newArr2);\n    setColors(newArr);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"container\">\n        <div className=\"row center-xs\">\n          <div className=\"col-xs-12\">\n            <h3>Choose a color</h3>\n            <input\n              type=\"text\"\n              className=\"input\"\n              value={inputValue.toLowerCase()}\n              onChange={(e) => setInputValue(e.target.value)}\n            />\n            <button\n              className=\"button\"\n              type=\"button\"\n              onClick={() => clickHandler()}\n            >\n              Submit\n            </button>\n            <div className=\"shape__wrapper\">\n              {colors.map((i, index) => {\n                return (\n                  <div key={uuidv4()}>\n                    <Square\n                      num={count[index]}\n                      visible={visible}\n                      color={i}\n                      onClick={() => deleteHandler(index)}\n                    />\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}